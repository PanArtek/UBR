---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Panel UBR - Edycja projektu" description="Edycja projektu UBR">
  <div class="min-h-screen bg-gray-50">
    <!-- Auth check -->
    <div id="authCheck" class="hidden min-h-screen bg-gray-100 flex items-center justify-center">
      <div class="text-center">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Brak autoryzacji</h2>
        <p class="text-gray-600 mb-6">Musisz się zalogować, aby uzyskać dostęp do panelu.</p>
        <a href="/UBR/admin/" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
          Przejdź do logowania
        </a>
      </div>
    </div>

    <!-- Main content -->
    <div id="mainContent" class="p-4" style="display: none;">
      <div class="max-w-4xl mx-auto">
        
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-2xl font-bold text-gray-800 mb-2" id="pageTitle">📝 Dodaj nowy projekt</h1>
              <p class="text-gray-600">Wypełnij formularz, aby dodać projekt do galerii</p>
            </div>
            <button onclick="goBack()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
              ← Wróć
            </button>
          </div>
        </div>
        
        <!-- Form -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <form id="projectForm" class="space-y-6">
            <!-- Hidden ID field for editing -->
            <input type="hidden" id="projectId" name="projectId" />
            
            <!-- Podstawowe dane -->
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                  Tytuł projektu *
                </label>
                <input 
                  type="text" 
                  id="title" 
                  name="title" 
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="np. Elegancka łazienka z prysznicem"
                  required
                />
              </div>
              <div>
                <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
                  Kategoria *
                </label>
                <select id="category" name="category" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                  <option value="">Wybierz kategorię</option>
                  <option value="lazienki-kuchnie">🛁 Łazienki & Kuchnie</option>
                  <option value="mieszkania">🏠 Mieszkania</option>
                  <option value="wykonczennia">🎨 Wykończenia</option>
                  <option value="domy-jednorodzinne">🏡 Domy jednorodzinne</option>
                  <option value="remonty-kapitalne">🔨 Remonty kapitalne</option>
                  <option value="dachy-elewacje">🏘️ Dachy & Elewacje</option>
                </select>
              </div>
            </div>

            <div class="grid md:grid-cols-3 gap-6">
              <div>
                <label for="location" class="block text-sm font-medium text-gray-700 mb-2">
                  Lokalizacja *
                </label>
                <input 
                  type="text" 
                  id="location" 
                  name="location" 
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="np. Warszawa, Wola"
                  required
                />
              </div>
              <div>
                <label for="area" class="block text-sm font-medium text-gray-700 mb-2">
                  Powierzchnia
                </label>
                <input 
                  type="text" 
                  id="area" 
                  name="area" 
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="np. 8m²"
                />
              </div>
              <div>
                <label for="year" class="block text-sm font-medium text-gray-700 mb-2">
                  Rok realizacji
                </label>
                <input 
                  type="text" 
                  id="year" 
                  name="year" 
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="2024"
                  value="2024"
                />
              </div>
            </div>

            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Opis projektu *
              </label>
              <textarea 
                id="description" 
                name="description" 
                rows="3" 
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Krótki opis realizacji..."
                required
              ></textarea>
            </div>

            <div>
              <label for="scope" class="block text-sm font-medium text-gray-700 mb-2">
                Zakres prac
              </label>
              <textarea 
                id="scope" 
                name="scope" 
                rows="2" 
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="np. Kompleksowy remont łazienki, montaż płytek, hydraulika..."
              ></textarea>
            </div>

            <!-- Features -->
            <div>
              <label for="features" class="block text-sm font-medium text-gray-700 mb-2">
                Cechy/Materiały
              </label>
              <div class="space-y-3">
                <input 
                  type="text" 
                  id="featuresInput" 
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="Dodaj cechę (np. Płytki wielkoformatowe) i naciśnij Enter"
                />
                <div id="featuresList" class="flex flex-wrap gap-2"></div>
              </div>
            </div>

            <!-- Upload zdjęć -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">📷 Zdjęcia projektu</label>
              <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
                <input type="file" multiple accept="image/*" id="imageUpload" class="hidden" />
                <label for="imageUpload" class="cursor-pointer block">
                  <div class="text-gray-500">
                    <svg class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                            d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p class="text-lg font-medium">Kliknij żeby dodać zdjęcia</p>
                    <p class="text-sm">lub przeciągnij i upuść pliki</p>
                    <p class="text-xs text-gray-400 mt-2">Obsługiwane formaty: JPG, PNG, WebP</p>
                  </div>
                </label>
              </div>
              
              <!-- Preview zdjęć -->
              <div id="imagePreview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6"></div>
            </div>

            <!-- Visibility toggle -->
            <div class="border-t border-gray-200 pt-6">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-lg font-medium text-gray-800">Widoczność projektu</h3>
                  <p class="text-sm text-gray-600">Określ, czy projekt ma być widoczny w galerii</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="isVisible" name="isVisible" class="sr-only peer" checked>
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  <span class="ml-3 text-sm font-medium text-gray-700">Publikuj</span>
                </label>
              </div>
            </div>

            <!-- Przyciski -->
            <div class="flex flex-col sm:flex-row gap-4 pt-6">
              <button type="button" onclick="goBack()" 
                      class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium">
                ← Anuluj
              </button>
              <button type="submit" 
                      class="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm">
                💾 Zapisz projekt
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .feature-tag {
    background-color: #eff6ff;
    color: #1e40af;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .image-preview-item {
    position: relative;
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .image-preview-item:hover .remove-btn {
    opacity: 1;
  }
  
  .image-preview-item img {
    width: 100%;
    height: 6rem;
    object-fit: cover;
  }
  
  .image-preview-item .remove-btn {
    position: absolute;
    top: 0.25rem;
    right: 0.25rem;
    background-color: #ef4444;
    color: white;
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    font-size: 0.875rem;
    opacity: 0;
    transition: opacity 0.2s;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .drag-over {
    border-color: #60a5fa;
    background-color: #dbeafe;
  }
</style>

<script>
  class ProjectEditor {
    constructor() {
      this.features = [];
      this.images = [];
      this.currentProjectId = null;
      this.isEditMode = false;
      this.init();
    }
    
    async init() {
      // Check authentication
      if (!this.isLoggedIn()) {
        this.showAuthError();
        return;
      }
      
      // Show main content
      document.getElementById('mainContent').style.display = 'block';
      
      // Check if editing existing project
      const urlParams = new URLSearchParams(window.location.search);
      const projectId = urlParams.get('id');
      
      if (projectId) {
        this.isEditMode = true;
        this.currentProjectId = projectId;
        await this.loadProject(projectId);
        document.getElementById('pageTitle').textContent = '✏️ Edytuj projekt';
      }
      
      this.setupEventListeners();
    }
    
    isLoggedIn() {
      const isLoggedIn = sessionStorage.getItem('ubr_admin_logged_in');
      const loginTime = sessionStorage.getItem('ubr_admin_login_time');
      
      if (!isLoggedIn || !loginTime) return false;
      
      const now = Date.now();
      const sessionAge = now - parseInt(loginTime);
      const maxAge = 8 * 60 * 60 * 1000;
      
      return sessionAge <= maxAge;
    }
    
    showAuthError() {
      document.getElementById('authCheck').classList.remove('hidden');
    }
    
    async loadProject(projectId) {
      try {
        const response = await fetch('/UBR/data/projects.json');
        const data = await response.json();
        const project = data.projects.find(p => p.id === projectId);
        
        if (project) {
          this.populateForm(project);
        } else {
          this.showNotification('Projekt nie został znaleziony', 'error');
          setTimeout(() => this.goBack(), 2000);
        }
      } catch (error) {
        console.error('Error loading project:', error);
        this.showNotification('Błąd podczas ładowania projektu', 'error');
      }
    }
    
    populateForm(project) {
      document.getElementById('projectId').value = project.id;
      document.getElementById('title').value = project.title;
      document.getElementById('category').value = project.category;
      document.getElementById('location').value = project.location;
      document.getElementById('area').value = project.area || '';
      document.getElementById('year').value = project.year || '';
      document.getElementById('description').value = project.description;
      document.getElementById('scope').value = project.scope || '';
      document.getElementById('isVisible').checked = project.isVisible;
      
      // Load features
      this.features = project.features || [];
      this.renderFeatures();
      
      // Load images info (in production, this would load actual images)
      if (project.images) {
        this.showExistingImages(project.images);
      }
    }
    
    showExistingImages(images) {
      const preview = document.getElementById('imagePreview');
      const existingImagesHtml = images.map(img => `
        <div class="image-preview-item">
          <img src="${img.url}" alt="${img.caption || 'Zdjęcie'}" onerror="this.src='/UBR/images/placeholder.svg'" />
          <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-2">
            <p class="truncate">${img.caption || 'Istniejące zdjęcie'}</p>
          </div>
        </div>
      `).join('');
      
      preview.innerHTML = existingImagesHtml;
    }
    
    setupEventListeners() {
      // Form submission
      const form = document.getElementById('projectForm');
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
      
      // Features input
      const featuresInput = document.getElementById('featuresInput');
      featuresInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.addFeature();
        }
      });
      
      // Image upload
      const imageUpload = document.getElementById('imageUpload');
      imageUpload.addEventListener('change', (e) => {
        this.handleImageUpload(e.target.files);
      });
      
      // Drag and drop
      const dropZone = imageUpload.parentElement;
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, this.preventDefaults, false);
      });
      
      ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => dropZone.classList.add('drag-over'), false);
      });
      
      ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, () => dropZone.classList.remove('drag-over'), false);
      });
      
      dropZone.addEventListener('drop', (e) => {
        const files = e.dataTransfer.files;
        this.handleImageUpload(files);
      }, false);
    }
    
    preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    addFeature() {
      const input = document.getElementById('featuresInput');
      const value = input.value.trim();
      
      if (value && !this.features.includes(value)) {
        this.features.push(value);
        this.renderFeatures();
        input.value = '';
      }
    }
    
    removeFeature(index) {
      this.features.splice(index, 1);
      this.renderFeatures();
    }
    
    renderFeatures() {
      const container = document.getElementById('featuresList');
      container.innerHTML = this.features.map((feature, index) => `
        <span class="feature-tag">
          ${feature}
          <button type="button" onclick="projectEditor.removeFeature(${index})" class="hover:bg-red-200 rounded-full w-5 h-5 flex items-center justify-center">
            ×
          </button>
        </span>
      `).join('');
    }
    
    handleImageUpload(files) {
      const preview = document.getElementById('imagePreview');
      
      Array.from(files).forEach((file, index) => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const div = document.createElement('div');
            div.className = 'image-preview-item';
            div.innerHTML = `
              <img src="${e.target.result}" alt="Preview" />
              <button type="button" onclick="this.parentElement.remove()" class="remove-btn">×</button>
              <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-2">
                <input type="text" placeholder="Opis zdjęcia..." 
                       class="w-full bg-transparent border-none text-white placeholder-gray-300 text-xs" />
              </div>
            `;
            preview.appendChild(div);
          };
          reader.readAsDataURL(file);
          
          // Store file for upload
          this.images.push(file);
        }
      });
    }
    
    async handleSubmit() {
      const formData = new FormData(document.getElementById('projectForm'));
      
      // Collect form data
      const projectData = {
        id: this.isEditMode ? this.currentProjectId : this.generateId(),
        title: formData.get('title'),
        category: formData.get('category'),
        location: formData.get('location'),
        area: formData.get('area'),
        year: formData.get('year') || new Date().getFullYear().toString(),
        description: formData.get('description'),
        scope: formData.get('scope'),
        features: this.features,
        isVisible: formData.get('isVisible') === 'on',
        createdAt: this.isEditMode ? undefined : new Date().toISOString(),
        order: this.isEditMode ? undefined : Date.now()
      };
      
      // Show loading state
      const submitBtn = document.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.textContent = '⏳ Zapisywanie...';
      submitBtn.disabled = true;
      
      try {
        // Save to localStorage (for demo/static site)
        this.saveProjectToLocalStorage(projectData);
        
        this.showNotification(
          this.isEditMode ? 'Projekt został zaktualizowany!' : 'Projekt został dodany!',
          'success'
        );
        
        // Redirect after success
        setTimeout(() => {
          window.location.href = '/UBR/admin/projects/';
        }, 1500);
        
      } catch (error) {
        console.error('Error saving project:', error);
        this.showNotification('Błąd podczas zapisywania projektu', 'error');
        
        // Restore button
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      }
    }
    
    generateId() {
      return 'proj-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
    }
    
    saveProjectToLocalStorage(projectData) {
      try {
        // Get existing projects from localStorage
        const existing = localStorage.getItem('ubr_projects');
        let projects = existing ? JSON.parse(existing) : [];
        
        // Add images from preview
        projectData.images = this.collectImageData();
        
        if (this.isEditMode) {
          // Update existing project
          const index = projects.findIndex(p => p.id === projectData.id);
          if (index >= 0) {
            projects[index] = { ...projects[index], ...projectData };
          } else {
            projects.push(projectData);
          }
        } else {
          // Add new project
          projects.push(projectData);
        }
        
        // Save back to localStorage
        localStorage.setItem('ubr_projects', JSON.stringify(projects));
        
        console.log('Project saved to localStorage:', projectData);
        return Promise.resolve();
        
      } catch (error) {
        console.error('Error saving to localStorage:', error);
        return Promise.reject(error);
      }
    }
    
    collectImageData() {
      const preview = document.getElementById('imagePreview');
      if (!preview) return [];
      
      const images = [];
      const imageElements = preview.querySelectorAll('img');
      
      imageElements.forEach((img, index) => {
        const captionInput = img.parentElement.querySelector('input[type="text"]');
        images.push({
          id: `img-${Date.now()}-${index}`,
          url: img.src,
          caption: captionInput ? captionInput.value : '',
          isMain: index === 0,
          order: index + 1,
          filename: `local_image_${index + 1}.jpg`
        });
      });
      
      return images;
    }
    
    showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white transform transition-all duration-300 translate-x-full ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 'bg-blue-600'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
    
    goBack() {
      if (confirm('Czy na pewno chcesz wyjść? Niezapisane zmiany zostaną utracone.')) {
        window.location.href = '/UBR/admin/projects/';
      }
    }
  }
  
  // Global functions
  window.goBack = () => {
    window.projectEditor.goBack();
  };
  
  // Initialize
  let projectEditor;
  document.addEventListener('DOMContentLoaded', () => {
    projectEditor = new ProjectEditor();
    window.projectEditor = projectEditor;
  });
</script>