---
import Layout from '../../layouts/Layout.astro';

const categories = [
  { id: 'domy-jednorodzinne', name: 'Domy jednorodzinne' },
  { id: 'mieszkania', name: 'Mieszkania' },
  { id: 'remonty-kapitalne', name: 'Remonty kapitalne' },
  { id: 'wykonczennia', name: 'Wykończenia' },
  { id: 'dachy-elewacje', name: 'Dachy i elewacje' },
  { id: 'lazienki-kuchnie', name: 'Łazienki i kuchnie' },
];
---

<Layout title="Dodaj zdjęcia" description="Panel dodawania zdjęć">
  <div class="min-h-screen bg-gray-100 py-8 px-4">
    <div class="max-w-4xl mx-auto">
      <!-- Back Button -->
      <a href="/admin" class="inline-flex items-center text-blue-600 hover:text-blue-800 mb-6">
        ← Powrót do panelu
      </a>
      
      <div class="bg-white rounded-lg shadow-lg p-6 md:p-8">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">
          Dodaj nowe zdjęcia projektu
        </h1>
        
        <form class="space-y-6" id="upload-form">
          <!-- Project Name -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Nazwa projektu *
            </label>
            <input
              type="text"
              name="project_name"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="np. Dom jednorodzinny - Warszawa"
            />
          </div>
          
          <!-- Category -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Kategoria *
            </label>
            <select
              name="category"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">Wybierz kategorię</option>
              {categories.map((cat) => (
                <option value={cat.id}>{cat.name}</option>
              ))}
            </select>
          </div>
          
          <!-- Description -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Opis projektu
            </label>
            <textarea
              name="description"
              rows="3"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              placeholder="Krótki opis projektu..."
            ></textarea>
          </div>
          
          <!-- Before/After Toggle -->
          <div>
            <label class="flex items-center">
              <input
                type="checkbox"
                name="is_renovation"
                class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span class="text-sm text-gray-700">
                To jest projekt renowacji (przed/po)
              </span>
            </label>
          </div>
          
          <!-- File Upload -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Zdjęcia *
            </label>
            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
              <input
                type="file"
                name="photos"
                multiple
                accept="image/*"
                class="hidden"
                id="photo-input"
              />
              <label for="photo-input" class="cursor-pointer">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <p class="mt-2 text-sm text-gray-600">
                  Kliknij aby wybrać zdjęcia lub przeciągnij je tutaj
                </p>
                <p class="text-xs text-gray-500 mt-1">
                  PNG, JPG do 10MB każde
                </p>
              </label>
            </div>
            
            <!-- Preview Area -->
            <div id="preview-area" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4"></div>
            
            <!-- Photo Editor Modal -->
            <div id="photo-editor-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
              <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
                <div class="p-4 border-b flex justify-between items-center">
                  <h3 class="text-lg font-medium">Edytuj zdjęcie</h3>
                  <button id="close-editor" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <div class="p-4">
                  <!-- Editor Tools -->
                  <div class="flex flex-wrap gap-2 mb-4 pb-4 border-b">
                    <button id="rotate-left" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5v10z" />
                      </svg>
                      Obróć w lewo
                    </button>
                    <button id="rotate-right" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5v10z" />
                      </svg>
                      Obróć w prawo
                    </button>
                    <button id="flip-horizontal" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm">
                      Odbij poziomo
                    </button>
                    <button id="toggle-crop" class="px-3 py-1 bg-blue-100 hover:bg-blue-200 text-blue-800 rounded text-sm">
                      Kadrowanie
                    </button>
                    <button id="reset-image" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm">
                      Reset
                    </button>
                  </div>
                  
                  <!-- Image Canvas -->
                  <div class="relative bg-gray-100 rounded overflow-hidden" style="height: 400px;">
                    <canvas id="edit-canvas" class="max-w-full max-h-full mx-auto"></canvas>
                  </div>
                  
                  <!-- Save/Cancel -->
                  <div class="flex justify-end gap-2 mt-4">
                    <button id="cancel-edit" class="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50">
                      Anuluj
                    </button>
                    <button id="save-edit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                      Zapisz zmiany
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Submit Button -->
          <div class="flex justify-end space-x-4">
            <a
              href="/admin"
              class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Anuluj
            </a>
            <button
              type="submit"
              class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors font-medium"
            >
              Dodaj zdjęcia
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Image compression utility
    class ImageCompressor {
      static compressImage(file, maxWidth = 1200, quality = 0.8) {
        return new Promise((resolve) => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          const img = new Image();
          
          img.onload = () => {
            // Calculate new dimensions
            let { width, height } = img;
            if (width > maxWidth) {
              height = (height * maxWidth) / width;
              width = maxWidth;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // Draw and compress
            ctx.drawImage(img, 0, 0, width, height);
            canvas.toBlob(resolve, 'image/jpeg', quality);
          };
          
          img.src = URL.createObjectURL(file);
        });
      }
      
      static generateFileName(originalName, projectName, category, timestamp) {
        const cleanProjectName = projectName.toLowerCase()
          .replace(/[^a-z0-9\s]/g, '')
          .replace(/\s+/g, '-')
          .substring(0, 30);
        
        const fileExtension = originalName.split('.').pop().toLowerCase();
        return `${category}_${cleanProjectName}_${timestamp}.${fileExtension}`;
      }
    }

    // File upload preview with compression
    const photoInput = document.getElementById('photo-input') as HTMLInputElement;
    const previewArea = document.getElementById('preview-area');
    let processedFiles = [];
    
    photoInput?.addEventListener('change', async (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (!files) return;
      
      previewArea!.innerHTML = '';
      processedFiles = [];
      
      const projectNameInput = document.querySelector('input[name="project_name"]') as HTMLInputElement;
      const categorySelect = document.querySelector('select[name="category"]') as HTMLSelectElement;
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        if (!file.type.startsWith('image/')) continue;
        
        // Show loading state
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'relative group bg-gray-100 rounded flex items-center justify-center h-24';
        loadingDiv.innerHTML = `
          <div class="text-center">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
            <p class="text-xs text-gray-500 mt-1">Kompresowanie...</p>
          </div>
        `;
        previewArea?.appendChild(loadingDiv);
        
        try {
          // Compress image
          const compressedFile = await ImageCompressor.compressImage(file, 1200, 0.85);
          
          // Generate new filename
          const timestamp = Date.now() + i;
          const newFileName = ImageCompressor.generateFileName(
            file.name,
            projectNameInput.value || 'projekt',
            categorySelect.value || 'general',
            timestamp
          );
          
          // Create processed file object
          const processedFile = new File([compressedFile], newFileName, {
            type: 'image/jpeg',
            lastModified: Date.now()
          });
          
          processedFiles.push(processedFile);
          
          // Create preview
          const reader = new FileReader();
          reader.onload = (e) => {
            loadingDiv.className = 'relative group';
            loadingDiv.innerHTML = `
              <img src="${e.target?.result}" class="w-full h-24 object-cover rounded" />
              <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded flex items-center justify-center">
                <div class="flex gap-2">
                  <button type="button" class="bg-blue-500 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity edit-image" data-index="${processedFiles.length - 1}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button type="button" class="bg-red-500 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity remove-image" data-index="${processedFiles.length - 1}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-2 rounded-b">
                <p class="text-xs text-white truncate">${newFileName}</p>
                <p class="text-xs text-gray-300">
                  ${(compressedFile.size / 1024).toFixed(0)}KB 
                  (${((1 - compressedFile.size / file.size) * 100).toFixed(0)}% zmniejszenie)
                </p>
              </div>
            `;
          };
          reader.readAsDataURL(compressedFile);
          
        } catch (error) {
          console.error('Błąd kompresji:', error);
          loadingDiv.innerHTML = `
            <div class="text-center text-red-500">
              <p class="text-xs">Błąd kompresji</p>
            </div>
          `;
        }
      }
    });
    
    // Remove image functionality
    previewArea?.addEventListener('click', (e) => {
      const button = e.target.closest('.remove-image');
      if (button) {
        const index = parseInt(button.dataset.index);
        processedFiles.splice(index, 1);
        button.closest('.relative').remove();
        
        // Update indices
        document.querySelectorAll('.remove-image').forEach((btn, i) => {
          btn.dataset.index = i.toString();
        });
      }
    });
    
    // Enhanced form submission
    const form = document.getElementById('upload-form');
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const projectName = formData.get('project_name');
      const category = formData.get('category');
      const description = formData.get('description');
      const isRenovation = formData.get('is_renovation') === 'on';
      
      if (!projectName || !category || processedFiles.length === 0) {
        alert('Proszę wypełnić wszystkie wymagane pola i dodać co najmniej jedno zdjęcie.');
        return;
      }
      
      // Simulate saving to localStorage (for GitHub Pages)
      try {
        const existingProjects = JSON.parse(localStorage.getItem('ubr_projects') || '[]');
        const projectId = `proj-${Date.now()}`;
        
        const newProject = {
          id: projectId,
          title: projectName,
          category: category,
          location: 'Warszawa', // Default location
          scope: description || 'Projekt realizowany przez UBR',
          area: '', // To be filled later
          duration: '', // To be filled later
          year: new Date().getFullYear().toString(),
          description: description || projectName,
          features: [],
          images: processedFiles.map((file, index) => ({
            id: `img-${projectId}-${index}`,
            filename: file.name,
            url: `/UBR/images/projects/${category}/${file.name}`,
            caption: `${projectName} - zdjęcie ${index + 1}`,
            isMain: index === 0,
            order: index + 1,
            size: file.size,
            compressed: true
          })),
          createdAt: new Date().toISOString(),
          isVisible: true,
          order: existingProjects.length + 1,
          isRenovation: isRenovation
        };
        
        existingProjects.push(newProject);
        localStorage.setItem('ubr_projects', JSON.stringify(existingProjects));
        
        // Show success message
        const successDiv = document.createElement('div');
        successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-md shadow-lg z-50';
        successDiv.innerHTML = `
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Projekt dodany pomyślnie!
          </div>
        `;
        document.body.appendChild(successDiv);
        
        setTimeout(() => {
          successDiv.remove();
          window.location.href = '/admin/projects';
        }, 2000);
        
      } catch (error) {
        console.error('Błąd zapisywania projektu:', error);
        alert('Wystąpił błąd podczas zapisywania projektu.');
      }
    });
    
    // Auto-update filename based on project name and category
    const projectNameInput = document.querySelector('input[name="project_name"]') as HTMLInputElement;
    const categorySelect = document.querySelector('select[name="category"]') as HTMLSelectElement;
    
    [projectNameInput, categorySelect].forEach(input => {
      input?.addEventListener('change', () => {
        if (processedFiles.length > 0) {
          // Re-process files with new names if needed
          console.log('Project name or category changed');
        }
      });
    });
    
    // Photo Editor Functionality
    class PhotoEditor {
      constructor() {
        this.canvas = document.getElementById('edit-canvas') as HTMLCanvasElement;
        this.ctx = this.canvas.getContext('2d');
        this.modal = document.getElementById('photo-editor-modal');
        this.currentImage = null;
        this.currentFileIndex = -1;
        this.imageData = {
          rotation: 0,
          flipX: false,
          cropData: null
        };
        this.setupEventListeners();
      }
      
      setupEventListeners() {
        // Modal controls
        document.getElementById('close-editor')?.addEventListener('click', () => this.closeEditor());
        document.getElementById('cancel-edit')?.addEventListener('click', () => this.closeEditor());
        document.getElementById('save-edit')?.addEventListener('click', () => this.saveChanges());
        
        // Edit tools
        document.getElementById('rotate-left')?.addEventListener('click', () => this.rotate(-90));
        document.getElementById('rotate-right')?.addEventListener('click', () => this.rotate(90));
        document.getElementById('flip-horizontal')?.addEventListener('click', () => this.flipHorizontal());
        document.getElementById('reset-image')?.addEventListener('click', () => this.resetImage());
        
        // Edit button clicks
        previewArea?.addEventListener('click', (e) => {
          const editButton = e.target.closest('.edit-image');
          if (editButton) {
            const index = parseInt(editButton.dataset.index);
            this.openEditor(index);
          }
        });
      }
      
      openEditor(fileIndex) {
        if (!processedFiles[fileIndex]) return;
        
        this.currentFileIndex = fileIndex;
        this.resetImageData();
        
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = new Image();
          img.onload = () => {
            this.currentImage = img;
            this.drawImage();
            this.modal.classList.remove('hidden');
          };
          img.src = e.target.result;
        };
        reader.readAsDataURL(processedFiles[fileIndex]);
      }
      
      closeEditor() {
        this.modal.classList.add('hidden');
        this.currentImage = null;
        this.currentFileIndex = -1;
        this.resetImageData();
      }
      
      resetImageData() {
        this.imageData = {
          rotation: 0,
          flipX: false,
          cropData: null
        };
      }
      
      resetImage() {
        this.resetImageData();
        this.drawImage();
      }
      
      rotate(degrees) {
        this.imageData.rotation = (this.imageData.rotation + degrees) % 360;
        this.drawImage();
      }
      
      flipHorizontal() {
        this.imageData.flipX = !this.imageData.flipX;
        this.drawImage();
      }
      
      drawImage() {
        if (!this.currentImage) return;
        
        const { width, height } = this.currentImage;
        const canvasSize = 400;
        
        // Calculate scale to fit image in canvas
        const scale = Math.min(canvasSize / width, canvasSize / height);
        const scaledWidth = width * scale;
        const scaledHeight = height * scale;
        
        this.canvas.width = canvasSize;
        this.canvas.height = canvasSize;
        
        this.ctx.clearRect(0, 0, canvasSize, canvasSize);
        this.ctx.save();
        
        // Center the image
        this.ctx.translate(canvasSize / 2, canvasSize / 2);
        
        // Apply transformations
        this.ctx.rotate((this.imageData.rotation * Math.PI) / 180);
        if (this.imageData.flipX) {
          this.ctx.scale(-1, 1);
        }
        
        // Draw image
        this.ctx.drawImage(
          this.currentImage,
          -scaledWidth / 2,
          -scaledHeight / 2,
          scaledWidth,
          scaledHeight
        );
        
        this.ctx.restore();
      }
      
      async saveChanges() {
        if (!this.currentImage || this.currentFileIndex === -1) return;
        
        // Create a new canvas with the edited image
        const outputCanvas = document.createElement('canvas');
        const outputCtx = outputCanvas.getContext('2d');
        
        const { width, height } = this.currentImage;
        
        // Handle rotation dimensions
        if (Math.abs(this.imageData.rotation) === 90 || Math.abs(this.imageData.rotation) === 270) {
          outputCanvas.width = height;
          outputCanvas.height = width;
        } else {
          outputCanvas.width = width;
          outputCanvas.height = height;
        }
        
        outputCtx.save();
        outputCtx.translate(outputCanvas.width / 2, outputCanvas.height / 2);
        outputCtx.rotate((this.imageData.rotation * Math.PI) / 180);
        
        if (this.imageData.flipX) {
          outputCtx.scale(-1, 1);
        }
        
        outputCtx.drawImage(
          this.currentImage,
          -width / 2,
          -height / 2,
          width,
          height
        );
        
        outputCtx.restore();
        
        // Convert to blob and update the file
        outputCanvas.toBlob(async (blob) => {
          const originalFile = processedFiles[this.currentFileIndex];
          const editedFile = new File([blob], originalFile.name, {
            type: 'image/jpeg',
            lastModified: Date.now()
          });
          
          processedFiles[this.currentFileIndex] = editedFile;
          
          // Update the preview
          const reader = new FileReader();
          reader.onload = (e) => {
            const previewElements = document.querySelectorAll('.edit-image');
            const targetPreview = previewElements[this.currentFileIndex];
            if (targetPreview) {
              const imgElement = targetPreview.closest('.relative').querySelector('img');
              if (imgElement) {
                imgElement.src = e.target.result;
              }
            }
          };
          reader.readAsDataURL(editedFile);
          
          this.closeEditor();
        }, 'image/jpeg', 0.9);
      }
    }
    
    // Initialize photo editor
    const photoEditor = new PhotoEditor();
  </script>
</Layout>