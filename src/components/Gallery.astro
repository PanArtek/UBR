---
import ProjectPlaceholder from './ProjectPlaceholder.astro';

export interface Props {
  category?: string;
  limit?: number;
}

const { category = 'all', limit = 12 } = Astro.props;

// Load projects from JSON (server-side at build time)
let projectsData = {
  projects: [],
  categories: [
    { id: 'lazienki-kuchnie', name: '≈Åazienki & Kuchnie', icon: 'üõÅ', order: 1 },
    { id: 'mieszkania', name: 'Mieszkania', icon: 'üè†', order: 2 },
    { id: 'wykonczennia', name: 'Wyko≈Ñczenia', icon: 'üé®', order: 3 },
    { id: 'domy-jednorodzinne', name: 'Domy jednorodzinne', icon: 'üè°', order: 4 },
    { id: 'remonty-kapitalne', name: 'Remonty kapitalne', icon: 'üî®', order: 5 },
    { id: 'dachy-elewacje', name: 'Dachy & Elewacje', icon: 'üèòÔ∏è', order: 6 }
  ]
};

try {
  const response = await fetch(`${Astro.site || 'https://panartek.github.io'}${import.meta.env.BASE_URL}data/projects.json`);
  projectsData = await response.json();
} catch (error) {
  console.warn('Could not load projects.json, using fallback data');
}

const { projects, categories } = projectsData;
// Note: visibleProjects will be calculated client-side including localStorage projects

// Initial projects for server-side rendering
const initialProjects = projects.filter(p => p.isVisible) || [];
---

<div class="gallery-container">
  <!-- Filtry kategorii -->
  <div class="category-filters mb-8">
    <div class="flex flex-wrap justify-center gap-3">
      <button data-category="all" class="filter-btn active">
        Wszystkie (<span id="totalCount">{initialProjects.length}</span>)
      </button>
      {categories.map(cat => {
        const count = initialProjects.filter(p => p.category === cat.id).length;
        return (
          <button data-category={cat.id} class="filter-btn">
            {cat.icon} {cat.name} (<span id={`count-${cat.id}`}>{count}</span>)
          </button>
        );
      })}
    </div>
  </div>

  <!-- Grid projekt√≥w -->
  <div class="projects-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {initialProjects.map((project, index) => (
      <div class="project-card card animate-fadeIn" 
           style={`animation-delay: ${index * 0.1}s;`}
           data-category={project.category}
           onclick={`openLightbox('${project.id}')`}>
        
        <!-- Zdjƒôcie g≈Ç√≥wne lub placeholder -->
        <div class="project-image relative overflow-hidden rounded-t-lg">
          {project.images?.length > 0 ? (
            <img src={project.images.find(img => img.isMain)?.url || project.images[0].url} 
                 alt={project.title}
                 class="w-full h-64 object-cover transition-transform duration-700 group-hover:scale-110" 
                 loading="lazy" />
          ) : (
            <ProjectPlaceholder category={project.category} width={400} height={256} index={index} />
          )}
          
          {/* Badge z liczbƒÖ zdjƒôƒá */}
          {project.images?.length > 1 && (
            <div class="absolute top-3 right-3 bg-black/70 backdrop-blur-sm text-white text-xs px-3 py-1.5 rounded-full">
              üì∑ {project.images.length}
            </div>
          )}
          
          {/* Gradient overlay */}
          <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        </div>

        <!-- Informacje o projekcie -->
        <div class="project-info p-6">
          <h3 class="font-bold text-xl mb-2 group-hover:text-[#31EC56] transition-colors duration-300">{project.title}</h3>
          <p class="text-gray-600 text-sm mb-3 flex items-center gap-2">
            <svg class="w-4 h-4 text-[#EF036C]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            {project.location} ‚Ä¢ {project.area}
          </p>
          <p class="text-gray-700 text-sm line-clamp-2 mb-4">{project.description}</p>
          
          {project.features && (
            <div class="features flex flex-wrap gap-2">
              {project.features.slice(0, 3).map(feature => (
                <span class="bg-[#31EC56]/10 text-[#31EC56] text-xs font-medium px-3 py-1 rounded-full">
                  {feature}
                </span>
              ))}
              {project.features.length > 3 && (
                <span class="text-gray-500 text-xs font-medium">+{project.features.length - 3}</span>
              )}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <!-- No Projects Message -->
  <div id="emptyMessage" class="hidden text-center py-20">
    <div class="text-6xl mb-4">üèóÔ∏è</div>
    <p class="text-gray-500 text-lg">Brak projekt√≥w w tej kategorii.</p>
    <p class="text-gray-400">Wkr√≥tce dodamy wiƒôcej realizacji!</p>
  </div>
</div>

<!-- Lightbox Component -->
<div id="lightbox" class="lightbox fixed inset-0 z-50 hidden items-center justify-center bg-black/95 backdrop-blur-md">
  <div class="lightbox-content relative max-w-5xl max-h-[90vh] mx-4">
    <button id="lightboxClose" class="absolute -top-12 right-0 text-white text-4xl hover:text-[#31EC56] transition-colors">
      &times;
    </button>
    
    <div class="lightbox-image-container relative">
      <img id="lightboxImage" src="" alt="" class="max-w-full max-h-[75vh] object-contain rounded-lg shadow-2xl" />
      
      <div class="lightbox-info absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent p-8 text-white rounded-b-lg">
        <h3 id="lightboxTitle" class="text-2xl font-bold mb-2"></h3>
        <p id="lightboxDescription" class="text-sm opacity-90 mb-3"></p>
        <div class="lightbox-details flex gap-4 text-sm">
          <span id="lightboxLocation" class="flex items-center gap-1">
            <svg class="w-4 h-4 text-[#EF036C]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
          </span>
          <span id="lightboxArea"></span>
        </div>
      </div>
    </div>
    
    <button id="lightboxPrev" class="absolute top-1/2 -left-20 -translate-y-1/2 bg-white/10 backdrop-blur-sm hover:bg-[#31EC56]/20 text-white text-3xl w-14 h-14 rounded-full flex items-center justify-center transition-all hover:scale-110">
      &#8249;
    </button>
    <button id="lightboxNext" class="absolute top-1/2 -right-20 -translate-y-1/2 bg-white/10 backdrop-blur-sm hover:bg-[#31EC56]/20 text-white text-3xl w-14 h-14 rounded-full flex items-center justify-center transition-all hover:scale-110">
      &#8250;
    </button>
  </div>
</div>

<style>
  .filter-btn {
    padding: 0.625rem 1.25rem;
    border-radius: 9999px;
    font-weight: 600;
    font-size: 0.875rem;
    letter-spacing: 0.025em;
    text-transform: uppercase;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: white;
    color: var(--color-gray-700);
    border: 2px solid var(--color-gray-200);
  }
  
  .filter-btn:hover {
    border-color: var(--color-malachite);
    color: var(--color-malachite);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(49, 236, 86, 0.2);
  }
  
  .filter-btn.active {
    background: linear-gradient(135deg, var(--color-malachite) 0%, var(--color-heliotrope) 100%);
    color: white;
    border-color: transparent;
    box-shadow: 0 4px 14px rgba(49, 236, 86, 0.3);
  }
  
  .project-card {
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-card:hover {
    transform: translateY(-8px);
  }
  
  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--color-malachite), var(--color-razzmatazz), var(--color-heliotrope));
    transform: scaleX(0);
    transition: transform 0.3s ease;
    transform-origin: left;
  }
  
  .project-card:hover::before {
    transform: scaleX(1);
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .lightbox {
    animation: fadeIn 0.3s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  @media (max-width: 768px) {
    .lightbox-content #lightboxPrev,
    .lightbox-content #lightboxNext {
      position: fixed;
      top: auto;
      bottom: 2rem;
      left: 2rem;
      right: auto;
    }
    
    .lightbox-content #lightboxNext {
      left: auto;
      right: 2rem;
    }
    
    .lightbox-content {
      margin: 0 1rem;
    }
  }
</style>

<script>
  // Gallery functionality
  class GalleryManager {
    constructor() {
      this.projects = [];
      this.currentProjectId = null;
      this.currentImageIndex = 0;
      this.init();
    }
    
    async init() {
      await this.loadProjects();
      this.renderProjects();
      this.bindEvents();
    }
    
    async loadProjects() {
      // First try PHP API (for HostMark.pl)
      let apiProjects = [];
      try {
        const response = await fetch('/api/projects.php');
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            apiProjects = data.projects;
            console.log('Loaded projects from PHP API:', apiProjects.length);
          }
        }
      } catch (error) {
        console.warn('PHP API not available, falling back to JSON:', error);
      }
      
      // Fallback to JSON projects (for GitHub Pages)
      let jsonProjects = [];
      if (apiProjects.length === 0) {
        try {
          const response = await fetch('/UBR/data/projects.json');
          const data = await response.json();
          jsonProjects = data.projects.filter(p => p.isVisible);
        } catch (error) {
          console.warn('Could not load projects data:', error);
        }
      }
      
      // Load localStorage projects (demo functionality)
      const localProjects = this.getLocalStorageProjects();
      
      // Combine all sources and sort by order (newest first)
      this.projects = [...apiProjects, ...jsonProjects, ...localProjects]
        .filter(p => p.isVisible)
        .sort((a, b) => (b.order || 0) - (a.order || 0));
      
      // Update counters
      this.updateCounters();
    }
    
    getLocalStorageProjects() {
      try {
        const stored = localStorage.getItem('ubr_projects');
        return stored ? JSON.parse(stored) : [];
      } catch (error) {
        console.error('Error reading localStorage projects:', error);
        return [];
      }
    }
    
    updateCounters() {
      const totalCount = document.getElementById('totalCount');
      if (totalCount) {
        totalCount.textContent = this.projects.length;
      }
      
      // Update category counters
      const categories = ['lazienki-kuchnie', 'mieszkania', 'wykonczennia', 'domy-jednorodzinne', 'remonty-kapitalne', 'dachy-elewacje'];
      categories.forEach(catId => {
        const counter = document.getElementById(`count-${catId}`);
        if (counter) {
          const count = this.projects.filter(p => p.category === catId).length;
          counter.textContent = count;
        }
      });
    }
    
    bindEvents() {
      // Filter buttons
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
          e.target.classList.add('active');
          this.filterProjects(e.target.dataset.category);
        });
      });
      
      // Lightbox controls
      const lightboxClose = document.getElementById('lightboxClose');
      const lightboxPrev = document.getElementById('lightboxPrev');
      const lightboxNext = document.getElementById('lightboxNext');
      const lightbox = document.getElementById('lightbox');
      
      if (lightboxClose) lightboxClose.addEventListener('click', () => this.closeLightbox());
      if (lightboxPrev) lightboxPrev.addEventListener('click', () => this.prevImage());
      if (lightboxNext) lightboxNext.addEventListener('click', () => this.nextImage());
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (lightbox && lightbox.classList.contains('flex')) {
          switch(e.key) {
            case 'Escape': this.closeLightbox(); break;
            case 'ArrowLeft': this.prevImage(); break;
            case 'ArrowRight': this.nextImage(); break;
          }
        }
      });
      
      // Close on backdrop click
      if (lightbox) {
        lightbox.addEventListener('click', (e) => {
          if (e.target.id === 'lightbox') {
            this.closeLightbox();
          }
        });
      }
    }
    
    filterProjects(category) {
      const filteredProjects = category === 'all' 
        ? this.projects 
        : this.projects.filter(p => p.category === category);
      
      this.renderProjects(filteredProjects);
    }
    
    renderProjects(projectsToRender = this.projects) {
      const container = document.querySelector('.projects-grid');
      const emptyMessage = document.getElementById('emptyMessage');
      
      if (projectsToRender.length === 0) {
        container.innerHTML = '';
        emptyMessage.classList.remove('hidden');
        return;
      }
      
      emptyMessage.classList.add('hidden');
      
      container.innerHTML = projectsToRender.map((project, index) => `
        <div class="project-card card animate-fadeIn group" 
             style="animation-delay: ${index * 0.1}s;"
             data-category="${project.category}"
             onclick="openLightbox('${project.id}')">
          
          <!-- Zdjƒôcie g≈Ç√≥wne lub placeholder -->
          <div class="project-image relative overflow-hidden rounded-t-lg">
            ${project.images?.length > 0 ? `
              <img src="${project.images.find(img => img.isMain)?.url || project.images[0].url}" 
                   alt="${project.title}"
                   class="w-full h-64 object-cover transition-transform duration-700 group-hover:scale-110" 
                   loading="lazy" 
                   onerror="this.src='/UBR/images/placeholder.svg'" />
            ` : `
              <svg width="400" height="256" xmlns="http://www.w3.org/2000/svg" class="rounded-t-lg">
                <defs>
                  <linearGradient id="grad-${project.category}-${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#31EC56" />
                    <stop offset="50%" style="stop-color:#EF036C" />
                    <stop offset="100%" style="stop-color:#EE72F8" />
                  </linearGradient>
                </defs>
                <rect width="100%" height="100%" fill="url(#grad-${project.category}-${index})" />
                <text x="50%" y="40%" text-anchor="middle" fill="white" 
                      font-family="system-ui" font-size="18" font-weight="700">
                  ${this.getCategoryName(project.category)}
                </text>
                <text x="50%" y="60%" text-anchor="middle" fill="rgba(255,255,255,0.8)" 
                      font-family="system-ui" font-size="14">
                  UBR WYKO≈ÉCZENIA WNƒòTRZ
                </text>
              </svg>
            `}
            
            ${project.images?.length > 1 ? `
              <div class="absolute top-3 right-3 bg-black/70 backdrop-blur-sm text-white text-xs px-3 py-1.5 rounded-full">
                üì∑ ${project.images.length}
              </div>
            ` : ''}
            
            <!-- Gradient overlay -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </div>

          <!-- Informacje o projekcie -->
          <div class="project-info p-6">
            <h3 class="font-bold text-xl mb-2 group-hover:text-[#31EC56] transition-colors duration-300">${project.title}</h3>
            <p class="text-gray-600 text-sm mb-3 flex items-center gap-2">
              <svg class="w-4 h-4 text-[#EF036C]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              ${project.location} ‚Ä¢ ${project.area || 'N/A'}
            </p>
            <p class="text-gray-700 text-sm line-clamp-2 mb-4">${project.description}</p>
            
            ${project.features?.length ? `
              <div class="features flex flex-wrap gap-2">
                ${project.features.slice(0, 3).map(feature => 
                  `<span class="bg-[#31EC56]/10 text-[#31EC56] text-xs font-medium px-3 py-1 rounded-full">${feature}</span>`
                ).join('')}
                ${project.features.length > 3 ? `<span class="text-gray-500 text-xs font-medium">+${project.features.length - 3}</span>` : ''}
              </div>
            ` : ''}
          </div>
        </div>
      `).join('');
    }
    
    getCategoryName(categoryId) {
      const categoryNames = {
        'domy-jednorodzinne': 'Dom Jednorodzinny',
        'mieszkania': 'Mieszkanie', 
        'remonty-kapitalne': 'Remont Kapitalny',
        'wykonczennia': 'Wyko≈Ñczenia',
        'dachy-elewacje': 'Dachy & Elewacje',
        'lazienki-kuchnie': '≈Åazienki & Kuchnie'
      };
      return categoryNames[categoryId] || categoryId;
    }
    
    openLightbox(projectId) {
      const project = this.projects.find(p => p.id === projectId);
      if (!project || !project.images?.length) return;
      
      this.currentProjectId = projectId;
      this.currentImageIndex = 0;
      this.updateLightboxImage();
      
      const lightbox = document.getElementById('lightbox');
      if (lightbox) {
        lightbox.classList.replace('hidden', 'flex');
        document.body.style.overflow = 'hidden';
      }
    }
    
    closeLightbox() {
      const lightbox = document.getElementById('lightbox');
      if (lightbox) {
        lightbox.classList.replace('flex', 'hidden');
        document.body.style.overflow = '';
      }
    }
    
    prevImage() {
      const project = this.projects.find(p => p.id === this.currentProjectId);
      if (!project?.images?.length) return;
      
      this.currentImageIndex = this.currentImageIndex > 0 
        ? this.currentImageIndex - 1 
        : project.images.length - 1;
      this.updateLightboxImage();
    }
    
    nextImage() {
      const project = this.projects.find(p => p.id === this.currentProjectId);
      if (!project?.images?.length) return;
      
      this.currentImageIndex = this.currentImageIndex < project.images.length - 1 
        ? this.currentImageIndex + 1 
        : 0;
      this.updateLightboxImage();
    }
    
    updateLightboxImage() {
      const project = this.projects.find(p => p.id === this.currentProjectId);
      if (!project?.images?.length) return;
      
      const image = project.images[this.currentImageIndex];
      const lightboxImage = document.getElementById('lightboxImage');
      const lightboxTitle = document.getElementById('lightboxTitle');
      const lightboxDescription = document.getElementById('lightboxDescription');
      const lightboxLocation = document.getElementById('lightboxLocation');
      const lightboxArea = document.getElementById('lightboxArea');
      
      if (lightboxImage) lightboxImage.src = image.url;
      if (lightboxTitle) lightboxTitle.textContent = project.title;
      if (lightboxDescription) lightboxDescription.textContent = image.caption || project.description;
      if (lightboxLocation) lightboxLocation.innerHTML = `
        <svg class="w-4 h-4 text-[#EF036C]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        ${project.location}
      `;
      if (lightboxArea) lightboxArea.textContent = project.area;
    }
  }
  
  // Global functions for onclick handlers
  window.openLightbox = (projectId) => {
    if (window.galleryManager) {
      window.galleryManager.openLightbox(projectId);
    }
  };
  
  // Initialize gallery
  document.addEventListener('DOMContentLoaded', () => {
    window.galleryManager = new GalleryManager();
  });
</script>