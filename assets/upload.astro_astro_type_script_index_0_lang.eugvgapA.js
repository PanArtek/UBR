class p{static compressImage(e,t=1200,a=.8){return new Promise(i=>{const n=document.createElement("canvas"),s=n.getContext("2d"),o=new Image;o.onload=()=>{let{width:c,height:r}=o;c>t&&(r=r*t/c,c=t),n.width=c,n.height=r,s.drawImage(o,0,0,c,r),n.toBlob(i,"image/jpeg",a)},o.src=URL.createObjectURL(e)})}static generateFileName(e,t,a,i){const n=t.toLowerCase().replace(/[^a-z0-9\s]/g,"").replace(/\s+/g,"-").substring(0,30),s=e.split(".").pop().toLowerCase();return`${a}_${n}_${i}.${s}`}}const w=document.getElementById("photo-input"),u=document.getElementById("preview-area");let l=[];w?.addEventListener("change",async m=>{const e=m.target.files;if(!e)return;u.innerHTML="",l=[];const t=document.querySelector('input[name="project_name"]'),a=document.querySelector('select[name="category"]');for(let i=0;i<e.length;i++){const n=e[i];if(!n.type.startsWith("image/"))continue;const s=document.createElement("div");s.className="relative group bg-gray-100 rounded flex items-center justify-center h-24",s.innerHTML=`
          <div class="text-center">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
            <p class="text-xs text-gray-500 mt-1">Kompresowanie...</p>
          </div>
        `,u?.appendChild(s);try{const o=await p.compressImage(n,1200,.85),c=Date.now()+i,r=p.generateFileName(n.name,t.value||"projekt",a.value||"general",c),g=new File([o],r,{type:"image/jpeg",lastModified:Date.now()});l.push(g);const d=new FileReader;d.onload=h=>{s.className="relative group",s.innerHTML=`
              <img src="${h.target?.result}" class="w-full h-24 object-cover rounded" />
              <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded flex items-center justify-center">
                <div class="flex gap-2">
                  <button type="button" class="bg-blue-500 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity edit-image" data-index="${l.length-1}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button type="button" class="bg-red-500 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity remove-image" data-index="${l.length-1}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-2 rounded-b">
                <p class="text-xs text-white truncate">${r}</p>
                <p class="text-xs text-gray-300">
                  ${(o.size/1024).toFixed(0)}KB 
                  (${((1-o.size/n.size)*100).toFixed(0)}% zmniejszenie)
                </p>
              </div>
            `},d.readAsDataURL(o)}catch(o){console.error("Błąd kompresji:",o),s.innerHTML=`
            <div class="text-center text-red-500">
              <p class="text-xs">Błąd kompresji</p>
            </div>
          `}}});u?.addEventListener("click",m=>{const e=m.target.closest(".remove-image");if(e){const t=parseInt(e.dataset.index);l.splice(t,1),e.closest(".relative").remove(),document.querySelectorAll(".remove-image").forEach((a,i)=>{a.dataset.index=i.toString()})}});const v=document.getElementById("upload-form");v?.addEventListener("submit",async m=>{m.preventDefault();const e=new FormData(v),t=e.get("project_name"),a=e.get("category"),i=e.get("description"),n=e.get("is_renovation")==="on";if(!t||!a||l.length===0){alert("Proszę wypełnić wszystkie wymagane pola i dodać co najmniej jedno zdjęcie.");return}try{const s=JSON.parse(localStorage.getItem("ubr_projects")||"[]"),o=`proj-${Date.now()}`,c={id:o,title:t,category:a,location:"Warszawa",scope:i||"Projekt realizowany przez UBR",area:"",duration:"",year:new Date().getFullYear().toString(),description:i||t,features:[],images:l.map((g,d)=>({id:`img-${o}-${d}`,filename:g.name,url:`/UBR/images/projects/${a}/${g.name}`,caption:`${t} - zdjęcie ${d+1}`,isMain:d===0,order:d+1,size:g.size,compressed:!0})),createdAt:new Date().toISOString(),isVisible:!0,order:s.length+1,isRenovation:n};s.push(c),localStorage.setItem("ubr_projects",JSON.stringify(s));const r=document.createElement("div");r.className="fixed top-4 right-4 bg-green-500 text-white p-4 rounded-md shadow-lg z-50",r.innerHTML=`
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Projekt dodany pomyślnie!
          </div>
        `,document.body.appendChild(r),setTimeout(()=>{r.remove(),window.location.href="/admin/projects"},2e3)}catch(s){console.error("Błąd zapisywania projektu:",s),alert("Wystąpił błąd podczas zapisywania projektu.")}});const y=document.querySelector('input[name="project_name"]'),f=document.querySelector('select[name="category"]');[y,f].forEach(m=>{m?.addEventListener("change",()=>{l.length>0&&console.log("Project name or category changed")})});class I{constructor(){this.canvas=document.getElementById("edit-canvas"),this.ctx=this.canvas.getContext("2d"),this.modal=document.getElementById("photo-editor-modal"),this.currentImage=null,this.currentFileIndex=-1,this.imageData={rotation:0,flipX:!1,cropData:null},this.setupEventListeners()}setupEventListeners(){document.getElementById("close-editor")?.addEventListener("click",()=>this.closeEditor()),document.getElementById("cancel-edit")?.addEventListener("click",()=>this.closeEditor()),document.getElementById("save-edit")?.addEventListener("click",()=>this.saveChanges()),document.getElementById("rotate-left")?.addEventListener("click",()=>this.rotate(-90)),document.getElementById("rotate-right")?.addEventListener("click",()=>this.rotate(90)),document.getElementById("flip-horizontal")?.addEventListener("click",()=>this.flipHorizontal()),document.getElementById("reset-image")?.addEventListener("click",()=>this.resetImage()),u?.addEventListener("click",e=>{const t=e.target.closest(".edit-image");if(t){const a=parseInt(t.dataset.index);this.openEditor(a)}})}openEditor(e){if(!l[e])return;this.currentFileIndex=e,this.resetImageData();const t=new FileReader;t.onload=a=>{const i=new Image;i.onload=()=>{this.currentImage=i,this.drawImage(),this.modal.classList.remove("hidden")},i.src=a.target.result},t.readAsDataURL(l[e])}closeEditor(){this.modal.classList.add("hidden"),this.currentImage=null,this.currentFileIndex=-1,this.resetImageData()}resetImageData(){this.imageData={rotation:0,flipX:!1,cropData:null}}resetImage(){this.resetImageData(),this.drawImage()}rotate(e){this.imageData.rotation=(this.imageData.rotation+e)%360,this.drawImage()}flipHorizontal(){this.imageData.flipX=!this.imageData.flipX,this.drawImage()}drawImage(){if(!this.currentImage)return;const{width:e,height:t}=this.currentImage,a=400,i=Math.min(a/e,a/t),n=e*i,s=t*i;this.canvas.width=a,this.canvas.height=a,this.ctx.clearRect(0,0,a,a),this.ctx.save(),this.ctx.translate(a/2,a/2),this.ctx.rotate(this.imageData.rotation*Math.PI/180),this.imageData.flipX&&this.ctx.scale(-1,1),this.ctx.drawImage(this.currentImage,-n/2,-s/2,n,s),this.ctx.restore()}async saveChanges(){if(!this.currentImage||this.currentFileIndex===-1)return;const e=document.createElement("canvas"),t=e.getContext("2d"),{width:a,height:i}=this.currentImage;Math.abs(this.imageData.rotation)===90||Math.abs(this.imageData.rotation)===270?(e.width=i,e.height=a):(e.width=a,e.height=i),t.save(),t.translate(e.width/2,e.height/2),t.rotate(this.imageData.rotation*Math.PI/180),this.imageData.flipX&&t.scale(-1,1),t.drawImage(this.currentImage,-a/2,-i/2,a,i),t.restore(),e.toBlob(async n=>{const s=l[this.currentFileIndex],o=new File([n],s.name,{type:"image/jpeg",lastModified:Date.now()});l[this.currentFileIndex]=o;const c=new FileReader;c.onload=r=>{const d=document.querySelectorAll(".edit-image")[this.currentFileIndex];if(d){const h=d.closest(".relative").querySelector("img");h&&(h.src=r.target.result)}},c.readAsDataURL(o),this.closeEditor()},"image/jpeg",.9)}}new I;
